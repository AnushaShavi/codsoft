#Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report,confusion_matrix

#load iris dataset
df=pd.read_csv('/content/IRIS (1).csv')

df.head()

from sklearn.preprocessing import LabelEncoder
l_e=LabelEncoder()
df['species']=l_e.fit_transform(df[['species']])


df.head()

x=df.drop('species',axis=1)
y=df['species']

print(x)
print(y)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)
model=KNeighborsClassifier(n_neighbors=10)
model.fit(x_train,y_train)

y_pred=model.predict(x_test)

#Evaluate the model
print("classification report:::",classification_report(y_test,y_pred))
print("confusion matrix:::\n",confusion_matrix(y_test,y_pred))


from sklearn.model_selection import GridSearchCV

# Define a pipeline for preprocessing and model training
pipeline = Pipeline([
    ('scaler', StandardScaler()),  # Scale features
    ('knn', KNeighborsClassifier())  # K-Nearest Neighbors classifier
])

# Define hyperparameters grid for GridSearchCV
param_grid = {
    'knn__n_neighbors': [3, 5, 7, 9],  # Number of neighbors
    'knn__weights': ['uniform', 'distance']  # Weight function
}

# Perform GridSearchCV for hyperparameter tuning
grid_search = GridSearchCV(pipeline, param_grid, cv=5)
grid_search.fit(x_train, y_train)

# Best parameters and score
print("Best Parameters:", grid_search.best_params_)
print("Best Score:", grid_search.best_score_)

# Evaluate the best model
best_model = grid_search.best_estimator_
y_pred_best = best_model.predict(x_test)
print("Classification Report:")
print(classification_report(y_test, y_pred_best))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_best))


model.predict([[ 5.1,3.5,1.4,0.2]])

model.predict([[5.9,3.0,5.1 ,1.8]])
